{
  "source": "userInterface",
  "revision": 4,
  "description": null,
  "isDeleted": false,
  "variables": {
    "Dynatrace_Tenant": { "value": "" },
    "Dynatrace_Token": { "value": "" }
  },
  "variableGroups": [],
  "environments": [
    {
      "name": "CreateUtilitles",
      "rank": 1,
      "owner": {
        "displayName": "$OwnerName$",
        "id": "$OwnerId$",
        "uniqueName": "$OwnerUniqueName$"
      },
      "variables": {},
      "variableGroups": [],
      "preDeployApprovals": {
        "approvals": [
          {
            "rank": 1,
            "isAutomated": true,
            "isNotificationOn": false
          }
        ],
        "approvalOptions": {
          "requiredApproverCount": null,
          "releaseCreatorCanBeApprover": false,
          "autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped": false,
          "enforceIdentityRevalidation": false,
          "timeoutInMinutes": 0,
          "executionOrder": "beforeGates"
        }
      },
      "deployStep": { "id": 2 },
      "postDeployApprovals": {
        "approvals": [
          {
            "rank": 1,
            "isAutomated": true,
            "isNotificationOn": false
          }
        ],
        "approvalOptions": {
          "requiredApproverCount": null,
          "releaseCreatorCanBeApprover": false,
          "autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped": false,
          "enforceIdentityRevalidation": false,
          "timeoutInMinutes": 0,
          "executionOrder": "afterSuccessfulGates"
        }
      },
      "deployPhases": [
        {
          "deploymentInput": {
            "parallelExecution": { "parallelExecutionType": "none" },
            "skipArtifactsDownload": false,
            "artifactsDownloadInput": { "downloadInputs": [] },
            "queueId": "$Deployment group job$",
            "demands": [],
            "enableAccessToken": false,
            "timeoutInMinutes": 0,
            "jobCancelTimeoutInMinutes": 1,
            "condition": "succeeded()",
            "overrideInputs": {}
          },
          "rank": 1,
          "phaseType": "agentBasedDeployment",
          "name": "Agent job",
          "refName": null,
          "workflowTasks": [
            {
              "environment": {},
              "taskId": "94a74903-f93f-4075-884f-dc11f34058b4",
              "version": "2.*",
              "name": "Azure Deployment:Create Or Update Resource Group action on VstsResourceGroup-vstspipeline",
              "enabled": true,
              "alwaysRun": false,
              "continueOnError": false,
              "timeoutInMinutes": 0,
              "definitionType": "task",
              "overrideInputs": {},
              "condition": "succeeded()",
              "inputs": {
                "ConnectedServiceName": "",
                "action": "Create Or Update Resource Group",
                "resourceGroupName": "VstsResourceGroup-vstspipeline",
                "location": "South Central US",
                "templateLocation": "Linked artifact",
                "csmFileLink": "",
                "csmParametersFileLink": "",
                "csmFile": "$(System.DefaultWorkingDirectory)/_UnbreakablePipelineDemo-CI/ArmTemplates/FunctionsArmTemplate.json",
                "csmParametersFile": "$(System.DefaultWorkingDirectory)/_UnbreakablePipelineDemo-CI/ArmTemplates/functionarmTemplate.prameters.json",
                "overrideParameters": "",
                "deploymentMode": "Incremental",
                "enableDeploymentPrerequisites": "None",
                "deploymentGroupEndpoint": "",
                "project": "",
                "deploymentGroupName": "",
                "copyAzureVMTags": "true",
                "runAgentServiceAsUser": "false",
                "userName": "",
                "password": "",
                "outputVariable": "",
                "deploymentName": "",
                "deploymentOutputs": ""
              }
            },
            {
              "environment": {},
              "taskId": "497d490f-eea7-4f2b-ab94-48d9c1acdcb1",
              "version": "4.*",
              "name": "Azure App Service Deploy: HotDay-shabib-SelfhealingFunction",
              "refName": "",
              "enabled": true,
              "alwaysRun": false,
              "continueOnError": false,
              "timeoutInMinutes": 0,
              "definitionType": "task",
              "overrideInputs": {},
              "condition": "succeeded()",
              "inputs": {
                "ConnectionType": "AzureRM",
                "ConnectedServiceName": "",
                "PublishProfilePath": "$(System.DefaultWorkingDirectory)/**/*.pubxml",
                "PublishProfilePassword": "",
                "WebAppKind": "webApp",
                "WebAppName": "HotDay-shabib-SelfhealingFunction",
                "DeployToSlotOrASEFlag": "false",
                "ResourceGroupName": "",
                "SlotName": "production",
                "DockerNamespace": "",
                "DockerRepository": "",
                "DockerImageTag": "",
                "VirtualApplication": "",
                "Package": "$(System.DefaultWorkingDirectory)/_UnbreakablePipelineDemo-CI/FunctionsCode/DynatraceSelfHealingFunction.zip",
                "RuntimeStack": "",
                "RuntimeStackFunction": "",
                "StartupCommand": "",
                "ScriptType": "",
                "InlineScript": ":: You can provide your deployment commands here. One command per line.",
                "ScriptPath": "",
                "WebConfigParameters": "",
                "AppSettings": "",
                "ConfigurationSettings": "",
                "UseWebDeploy": "false",
                "DeploymentType": "webDeploy",
                "TakeAppOfflineFlag": "true",
                "SetParametersFile": "",
                "RemoveAdditionalFilesFlag": "false",
                "ExcludeFilesFromAppDataFlag": "true",
                "AdditionalArguments": "-retryAttempts:6 -retryInterval:10000",
                "RenameFilesFlag": "true",
                "XmlTransformation": "false",
                "XmlVariableSubstitution": "false",
                "JSONFiles": ""
              }
            },
            {
              "environment": {},
              "taskId": "497d490f-eea7-4f2b-ab94-48d9c1acdcb1",
              "version": "4.*",
              "name": "Azure App Service Deploy: HotDay-shabib-MonspecValidation",
              "refName": "",
              "enabled": true,
              "alwaysRun": false,
              "continueOnError": false,
              "timeoutInMinutes": 0,
              "definitionType": "task",
              "overrideInputs": {},
              "condition": "succeeded()",
              "inputs": {
                "ConnectionType": "AzureRM",
                "ConnectedServiceName": "",
                "PublishProfilePath": "$(System.DefaultWorkingDirectory)/**/*.pubxml",
                "PublishProfilePassword": "",
                "WebAppKind": "webApp",
                "WebAppName": "HotDay-shabib-MonspecValidation",
                "DeployToSlotOrASEFlag": "false",
                "ResourceGroupName": "",
                "SlotName": "production",
                "DockerNamespace": "",
                "DockerRepository": "",
                "DockerImageTag": "",
                "VirtualApplication": "",
                "Package": "$(System.DefaultWorkingDirectory)/_UnbreakablePipelineDemo-CI/FunctionsCode/MonspecValidation.zip",
                "RuntimeStack": "",
                "RuntimeStackFunction": "",
                "StartupCommand": "",
                "ScriptType": "",
                "InlineScript": ":: You can provide your deployment commands here. One command per line.",
                "ScriptPath": "",
                "WebConfigParameters": "",
                "AppSettings": "",
                "ConfigurationSettings": "",
                "UseWebDeploy": "false",
                "DeploymentType": "webDeploy",
                "TakeAppOfflineFlag": "true",
                "SetParametersFile": "",
                "RemoveAdditionalFilesFlag": "false",
                "ExcludeFilesFromAppDataFlag": "true",
                "AdditionalArguments": "-retryAttempts:6 -retryInterval:10000",
                "RenameFilesFlag": "true",
                "XmlTransformation": "false",
                "XmlVariableSubstitution": "false",
                "JSONFiles": ""
              }
            },
            {
              "environment": {},
              "taskId": "94a74903-f93f-4075-884f-dc11f34058b4",
              "version": "2.*",
              "name": "Azure Deployment:Create Or Update Resource Group action on VstsResourceGroup-vstspipeline",
              "refName": "",
              "enabled": true,
              "alwaysRun": false,
              "continueOnError": false,
              "timeoutInMinutes": 0,
              "definitionType": "task",
              "overrideInputs": {},
              "condition": "succeeded()",
              "inputs": {
                "ConnectedServiceName": "",
                "action": "Create Or Update Resource Group",
                "resourceGroupName": "VstsResourceGroup-vstspipeline",
                "location": "South Central US",
                "templateLocation": "Linked artifact",
                "csmFileLink": "",
                "csmParametersFileLink": "",
                "csmFile": "$(System.DefaultWorkingDirectory)/_UnbreakablePipelineDemo-CI/ArmTemplates/VmArmTemplate.json",
                "csmParametersFile": "",
                "overrideParameters": "",
                "deploymentMode": "Incremental",
                "enableDeploymentPrerequisites": "ConfigureVMWithDGAgent",
                "deploymentGroupEndpoint": "",
                "project": "UnbreakablePipelineDemo",
                "deploymentGroupName": "UnbreakablePipelineDemoDG",
                "copyAzureVMTags": "true",
                "runAgentServiceAsUser": "false",
                "userName": "",
                "password": "",
                "outputVariable": "",
                "deploymentName": "",
                "deploymentOutputs": ""
              }
            }
          ]
        },
        {
          "deploymentInput": {
            "healthPercent": 0,
            "deploymentHealthOption": "Custom",
            "tags": [],
            "skipArtifactsDownload": false,
            "artifactsDownloadInput": {
              "downloadInputs": [
                {
                  "artifactItems": [],
                  "alias": "_UnbreakablePipelineDemo-CI",
                  "artifactType": "Build",
                  "artifactDownloadMode": "All"
                }
              ]
            },
            "queueId": "$Deployment group job$",
            "demands": [],
            "enableAccessToken": false,
            "timeoutInMinutes": 0,
            "jobCancelTimeoutInMinutes": 1,
            "condition": "succeeded()",
            "overrideInputs": {}
          },
          "rank": 2,
          "phaseType": "machineGroupBasedDeployment",
          "name": "Deployment group job",
          "workflowTasks": [
            {
              "environment": {},
              "taskId": "6c731c3c-3c68-459a-a5c9-bde6e6595b5b",
              "version": "3.*",
              "name": "Deploy Dynatrace OneAgent to the VM's",
              "enabled": true,
              "alwaysRun": false,
              "continueOnError": false,
              "timeoutInMinutes": 0,
              "definitionType": "task",
              "overrideInputs": {},
              "condition": "succeeded()",
              "inputs": {
                "targetType": "inline",
                "filePath": "",
                "arguments": "",
                "script": "# Download and Install the Dynatrace OneAgent\n# Please provide Dynatrace Tenant and Tenant Token in the Variables section \n\nwget  -O Dynatrace-OneAgent-Linux.sh  $(Dynatrace_Tenant)\"/api/v1/deployment/installer/agent/unix/default/latest?Api-Token=\"$(Dynatrace_Token)\"&arch=x86&flavor=default\"\n\necho \"https://\"$(Dynatrace_Tenant)\"/api/v1/deployment/installer/agent/unix/default/latest?Api-Token=\"$(Dynatrace_Token)\"&arch=x86&flavor=default\"\n\nsudo /bin/sh Dynatrace-OneAgent-Linux.sh  APP_LOG_CONTENT_ACCESS=1 INFRA_ONLY=0\n\n",
                "workingDirectory": "",
                "failOnStderr": "false"
              }
            },
            {
              "environment": {},
              "taskId": "6c731c3c-3c68-459a-a5c9-bde6e6595b5b",
              "version": "3.*",
              "name": "Install node and pm2 on the VM's ",
              "refName": "",
              "enabled": true,
              "alwaysRun": false,
              "continueOnError": false,
              "timeoutInMinutes": 0,
              "definitionType": "task",
              "overrideInputs": {},
              "condition": "succeeded()",
              "inputs": {
                "targetType": "inline",
                "filePath": "",
                "arguments": "",
                "script": "# Install Npm\ncurl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\nsudo apt-get install -y nodejs\nnpm -v\n\n# Install pm2\nsudo npm install pm2 -g",
                "workingDirectory": "",
                "failOnStderr": "false"
              }
            }
          ]
        }
      ],
      "environmentOptions": {
        "emailNotificationType": "OnlyOnFailure",
        "emailRecipients": "release.environment.owner;release.creator",
        "skipArtifactsDownload": false,
        "timeoutInMinutes": 0,
        "enableAccessToken": false,
        "publishDeploymentStatus": true,
        "badgeEnabled": false,
        "autoLinkWorkItems": false,
        "pullRequestDeploymentEnabled": false
      },
      "demands": [],
      "conditions": [
        {
          "name": "ReleaseStarted",
          "conditionType": "event",
          "value": ""
        }
      ],
      "executionPolicy": {
        "concurrencyCount": 1,
        "queueDepthCount": 0
      },
      "schedules": [],
      "currentRelease": {},
      "retentionPolicy": {
        "daysToKeep": 30,
        "releasesToKeep": 3,
        "retainBuild": true
      },
      "processParameters": {},
      "properties": {},
      "preDeploymentGates": {
        "gatesOptions": null,
        "gates": []
      },
      "postDeploymentGates": {
        "gatesOptions": null,
        "gates": []
      },
      "environmentTriggers": []
    }
  ],
  "artifacts": [
    {
      "sourceId": "$ProjectId$:$UnbreakablePipelineDemo-CI-id$",
      "type": "Build",
      "alias": "_UnbreakablePipelineDemo-CI",
      "definitionReference": {
        "artifactSourceDefinitionUrl": {

          "name": ""
        },
        "defaultVersionBranch": {
          "id": "",
          "name": ""
        },
        "defaultVersionSpecific": {
          "id": "",
          "name": ""
        },
        "defaultVersionTags": {
          "id": "",
          "name": ""
        },
        "defaultVersionType": {
          "id": "latestType",
          "name": "Latest"
        },
        "definition": {
          "id": "$UnbreakablePipelineDemo-CI-id$",
          "name": "UnbreakablePipelineDemo-CI"
        },
        "definitions": {
          "id": "",
          "name": ""
        },
        "IsMultiDefinitionType": {
          "id": "False",
          "name": "False"
        },
        "project": {
          "id": "$ProjectId$",
          "name": "$ProjectName$"
        },
        "repository": {
          "id": "",
          "name": "UnbreakablePipelineDemo"
        }
      },
      "isPrimary": true,
      "isRetained": false
    }
  ],
  "triggers": [],
  "releaseNameFormat": "Release-$(rev:r)",
  "tags": [],
  "properties": {
    "DefinitionCreationSource": {
      "$type": "System.String",
      "$value": "Other"
    }
  },
  "name": "Create Utilities",
  "projectReference": null
}